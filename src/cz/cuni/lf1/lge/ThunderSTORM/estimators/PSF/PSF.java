package cz.cuni.lf1.lge.ThunderSTORM.estimators.PSF;

import static cz.cuni.lf1.lge.ThunderSTORM.utils.Math.ceil;
import java.util.Comparator;

public abstract class PSF {
    
    public double xpos;
    public double ypos;
    public double zpos;
    public double intensity;
    public double background;
    
    public abstract double[] getGradient(PSF where);
    public abstract double getValueAt(PSF where);
    public abstract double[] getParams();
    public abstract String[] getTitles();

    public void convertXYToNanoMeters(double pixelsize) {
        xpos *= pixelsize;
        ypos *= pixelsize;
    }
    
    @Override
    public String toString() {
        return "{[x:" + xpos + ",y:" + ypos + ",z:" + zpos + "]=" + intensity + "+" + background + "}";
    }
    
    @Override
    public boolean equals(Object o) {
        if(o instanceof PSF) {
            PSF psf = (PSF)o;
            return ((psf.xpos == xpos) && (psf.ypos == ypos) && (psf.ypos == ypos)
                    && (psf.intensity == intensity) && (psf.background == background));
        }
        return false;
    }

    // automatically generated by Netbeans IDE
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + (int) (Double.doubleToLongBits(this.xpos) ^ (Double.doubleToLongBits(this.xpos) >>> 32));
        hash = 31 * hash + (int) (Double.doubleToLongBits(this.ypos) ^ (Double.doubleToLongBits(this.ypos) >>> 32));
        hash = 31 * hash + (int) (Double.doubleToLongBits(this.zpos) ^ (Double.doubleToLongBits(this.zpos) >>> 32));
        hash = 31 * hash + (int) (Double.doubleToLongBits(this.intensity) ^ (Double.doubleToLongBits(this.intensity) >>> 32));
        hash = 31 * hash + (int) (Double.doubleToLongBits(this.background) ^ (Double.doubleToLongBits(this.background) >>> 32));
        return hash;
    }
    
    public static class XYZComparator implements Comparator<PSF> {
        @Override
        public int compare(PSF p1, PSF p2) {
            if(p1.xpos == p2.xpos) {
                if(p1.ypos == p2.ypos) {
                    if(p1.zpos == p2.zpos) {
                        if(p1.intensity == p2.intensity) {
                            return (int) ceil(p1.background - p2.background);
                        }
                        return (int) ceil(p1.intensity - p2.intensity);
                    }
                    return (int) ceil(p1.zpos - p2.zpos);
                }
                return (int) ceil(p1.ypos - p2.ypos);
            }
            return (int) ceil(p1.xpos - p2.xpos);
        }
    }
}
